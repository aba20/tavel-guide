{"version":3,"sources":["navigator/Home.js","navigator/City.js","navigator/Attractions.js","navigator/AboutUs.js","navigator/Errors.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","to","src","Component","City","console","log","this","props","name","printPhoto","snippet","printWeather","Attractions","getWeather","state","cityName","map","item","i","axios","get","then","res","setState","Math","round","data","main","temp","cityWeather","cityLoop","key","catch","err","getPhoto","hits","webformatURL","cityPhoto","results","index","photo","AboutUs","handleClick","event","preventDefault","newfeedback","feedback","handleInputChange","target","value","e","feed","indexOf","splice","onClick","delItem","bind","href","type","placeholder","onChange","Errors","App","baseline","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a67f1297.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '/Users/mac/Desktop/sei/projects/project #2/travel_guid/src/App.css'\nclass Home extends Component {\n  render(){\n  return (\n\n    \n    <div className='homebg'>\n   \n        <nav className=\"navbar navbar-dark bg-dark\">\n         <Link className=\"flex-sm-fill text-sm-center nav-link active\" to=\"/\"> Home </Link> \n         <Link className=\"flex-sm-fill text-sm-center nav-link\" to=\"/attractions\"> Attractions </Link>\n         <Link className=\"flex-sm-fill text-sm-center nav-link\" to=\"/aboutus\"> About Us </Link>\n      </nav> \n      <img src='https://images.unsplash.com/photo-1502602898657-3e91760cbb34?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max'/>\n    </div>\n  );\n};\n}\nexport default Home;\n","import React, {Component} from 'react';\n\n\nclass City extends Component {\n    render(){\n        console.log(this.props)\n    return(\n     <div className=\"card\">\n         {/* {this.props.printPhoto} */}\n        <h1 className=\"card-title\">{this.props.name}</h1>\n       <img src={this.props.printPhoto} className=\"card-img-top\"/>\n        <h5>France</h5>\n        <div className=\"card-body\">\n        <p className=\"card-text\">{this.props.snippet}</p> \n        <p>{this.props.printWeather} ÂºC </p>\n        </div>\n    </div>\n    )\n    }\n}\n\nexport default City;","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport City from './City';\n\n\n\n\n// class component\n// constructor ===> create states\n// componentDidMount ===> axios call\n// redner \n\nclass Attractions extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            cityName: [],\n\n            cityWeather: [],\n            printWeather: [],\n\n            cityPhoto: [],\n            printPhoto: [],\n            cityLoop:[],\n        }\n    }\n\n    componentDidMount() {\n        axios.get('https://www.triposo.com/api/20190906/location.json?part_of=France&tag_labels=city&count=10&order_by=-score&fields=name,id,snippet,parent_id,score,type')\n            .then(res => {\n\n                this.setState({\n                    cityName: res.data.results\n                })\n                this.getWeather()\n                this.getPhoto()\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    getWeather = () => {\n        this.state.cityName.map((item, i) => {\n\n            axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${item.name}&APPID=b835bb88562f14c7a763f8e2e693411a`)\n                .then(res => {\n                    this.setState({\n                        printWeather: Math.round(res.data.main.temp - 273.15),\n                        cityWeather: [...this.state.cityWeather, this.state.printWeather],\n                        cityLoop:[...this.state.cityLoop, <City name={item.name} snippet={item.snippet} key={i} printWeather={Math.round(res.data.main.temp - 273.15)} />],\n                    })\n                    // console.log();\n\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n        })\n    }\n    getPhoto = () => {\n        // console.log(\"ddddddd\");\n        // console.log(this.state.cityPhoto);\n        // console.log(this.state.cityName);\n        \n        this.state.cityName.map((item, i) => {\n\n            axios.get(`https://pixabay.com/api/?key=14172593-bc3af3ba1e2e832408b48aaa2&q=${item.name}&image_type=photo`)\n                .then(res => {\n                    console.log(res.data.hits[0].webformatURL);\n                    \n                    // this.setState({\n                    //     printPhoto: res.data.hits[0].webformatURL\n                    // })\n                    this.setState({\n                        // cityPhoto: [...this.state.cityPhoto, this.state.printPhoto],\n                        // cityLoop:[...this.state.cityLoop, <City name={item.name} snippet={item.snippet} key={i} printPhoto={res.data.hits[0].webformatURL}/>],\n                        cityPhoto: [...this.state.cityPhoto, res.data.hits[0].webformatURL]\n                    })\n                    // console.log();\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n        })\n    }\n\n\n    render() {\n        // console.log(this.state.cityWeather);\n        console.log(this.state.cityPhoto);\n\n\n        const cityLoop = this.state.cityName.map((item, index) => {\n            const temp = this.state.cityWeather[index]\n            const photo = this.state.cityPhoto[index]\n\n            // console.log(this.state.cityWeather[index])\n            console.log(photo)\n            // console.log('index', index);\n\n            return (\n                <City  name={item.name} printPhoto={photo} snippet={item.snippet} key={index} printWeather={temp}  />\n            )\n        });\n\n\n        return (\n            <div className='row'>\n                {cityLoop}\n            </div>\n\n        )\n    }\n\n}\n\n\nexport default Attractions;\n","import React, {Component} from \"react\";\n\n\n\nclass AboutUs extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      feedback: [],\n      newfeedback: \"\",\n    }\n\n  }\n  handleClick = (event) => {\n    event.preventDefault()\n    const data = this.state.newfeedback\n    this.setState({\n      feedback: [...this.state.feedback, data]\n    })\n\n  } \n\n  handleInputChange = (event) => {\n    event.preventDefault()\n    this.setState({\n      newfeedback: event.target.value\n    })\n  }\n  delItem(e){\n   \n    let feed = [...this.state.feedback]\n    let i = feed.indexOf(e)\n    feed.splice(i,1)\n\n    \n    this.setState({ feedback: feed})  \n}\n\n  render () {\n\n    \n    const feedback = this.state.feedback.map(item => {\n      return (\n        <div>\n      <p>{item}</p>\n      <button onClick={this.delItem.bind(this, item)}> <h6>DELETE</h6> </button>\n      </div>\n      )\n    })\n    return(\n      <div>\n        <h2>About Us</h2>\n        <p>This was made for propject two</p>\n\n        <h3>Contact</h3>\n        <p>You can reach us at <a href='./errors.js'>this page</a> or this email: example@email.com</p>\n        <h3> Feedback</h3>\n        <p><input type='text' placeholder='Write your feedback' value={this.state.newfeedback} name='newfeedback' onChange={this.handleInputChange}/></p>\n        <p><button className=\"btn btn-lg btn-primary\" onClick={this.handleClick}>Send Feedback</button></p>\n        {feedback}\n        \n\n      </div>\n    )\n  }\n\n}\n\nexport default AboutUs;\n","import React from \"react\";\n\nconst Errors = props => {\n  return (\n    <div>\n      <h1>ERROR: 404</h1>\n    </div>\n  );\n};\n\nexport default Errors;\n","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport Home from \"./navigator/Home\";\nimport Attractions from \"./navigator/Attractions\";\nimport AboutUs from \"./navigator/AboutUs\";\nimport Errors from \"./navigator/Errors\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport { BrowserRouter as HashRouter, Route, Link, Switch } from \"react-router-dom\";\n\nclass App extends Component{\n\n  render() {\n    return(\n    <HashRouter baseline=\"\\\">\n      \n     <nav><Link className=\"flex-sm-fill text-sm-center nav-link active\" to=\"/\"> Home </Link> </nav>\n    \n \n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path='/aboutus' component={AboutUs} />\n          <Route path=\"/attractions\" component={Attractions} />\n          <Route component={Errors} />\n        </Switch>\n      </div>\n    </HashRouter>\n    )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}